/* automatically generated by rust-bindgen */

pub const JANUS_SDP_OA_AUDIO: ::std::os::raw::c_uint = 1;
pub const JANUS_SDP_OA_VIDEO: ::std::os::raw::c_uint = 2;
pub const JANUS_SDP_OA_DATA: ::std::os::raw::c_uint = 3;
pub const JANUS_SDP_OA_AUDIO_DIRECTION: ::std::os::raw::c_uint = 4;
pub const JANUS_SDP_OA_VIDEO_DIRECTION: ::std::os::raw::c_uint = 5;
pub const JANUS_SDP_OA_AUDIO_CODEC: ::std::os::raw::c_uint = 6;
pub const JANUS_SDP_OA_VIDEO_CODEC: ::std::os::raw::c_uint = 7;
pub const JANUS_SDP_OA_AUDIO_PT: ::std::os::raw::c_uint = 8;
pub const JANUS_SDP_OA_VIDEO_PT: ::std::os::raw::c_uint = 9;
pub const JANUS_SDP_OA_AUDIO_DTMF: ::std::os::raw::c_uint = 10;
pub const JANUS_SDP_OA_VIDEO_RTCPFB_DEFAULTS: ::std::os::raw::c_uint = 11;
pub const JANUS_SDP_OA_VIDEO_H264_FMTP: ::std::os::raw::c_uint = 12;
pub const JANUS_SDP_OA_DONE: ::std::os::raw::c_uint = 0;
pub type guint64 = ::std::os::raw::c_ulong;
pub type gpointer = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _GList {
    pub data: gpointer,
    pub next: *mut GList,
    pub prev: *mut GList,
}
#[test]
fn bindgen_test_layout__GList() {
    assert_eq!(::std::mem::size_of::<_GList>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _GList ) ));
    assert_eq! (::std::mem::align_of::<_GList>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _GList ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _GList ) ) . data as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _GList ) , "::" ,
                stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _GList ) ) . next as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _GList ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _GList ) ) . prev as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _GList ) , "::" ,
                stringify ! ( prev ) ));
}
impl Clone for _GList {
    fn clone(&self) -> Self { *self }
}
pub type GList = _GList;
/// \brief Janus SDP internal object representation
#[repr(C)]
#[derive(Debug, Copy)]
pub struct janus_sdp {
    /// \brief v=
    pub version: ::std::os::raw::c_int,
    /// \brief o= name
    pub o_name: *mut ::std::os::raw::c_char,
    /// \brief o= session ID
    pub o_sessid: guint64,
    /// \brief o= version
    pub o_version: guint64,
    /// \brief o= protocol
    pub o_ipv4: gboolean,
    /// \brief o= address
    pub o_addr: *mut ::std::os::raw::c_char,
    /// \brief s=
    pub s_name: *mut ::std::os::raw::c_char,
    /// \brief t= start
    pub t_start: guint64,
    /// \brief t= stop
    pub t_stop: guint64,
    /// \brief c= protocol (not rendered for WebRTC usage)
    pub c_ipv4: gboolean,
    /// \brief c= address (not rendered for WebRTC usage)
    pub c_addr: *mut ::std::os::raw::c_char,
    /// \brief List of global a= attributes
    pub attributes: *mut GList,
    /// \brief List of m= m-lines
    pub m_lines: *mut GList,
}
#[test]
fn bindgen_test_layout_janus_sdp() {
    assert_eq!(::std::mem::size_of::<janus_sdp>() , 104usize , concat ! (
               "Size of: " , stringify ! ( janus_sdp ) ));
    assert_eq! (::std::mem::align_of::<janus_sdp>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( janus_sdp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . version as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . o_name as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( o_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . o_sessid as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( o_sessid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . o_version as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( o_version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . o_ipv4 as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( o_ipv4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . o_addr as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( o_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . s_name as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( s_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . t_start as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( t_start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . t_stop as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( t_stop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . c_ipv4 as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( c_ipv4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . c_addr as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( c_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . attributes as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( attributes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const janus_sdp ) ) . m_lines as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( janus_sdp ) , "::" ,
                stringify ! ( m_lines ) ));
}
impl Clone for janus_sdp {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
/// \brief Helper enumeration to quickly identify m-line directions
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum janus_sdp_mdirection {
    JANUS_SDP_DEFAULT = 0,
    JANUS_SDP_SENDRECV = 1,
    JANUS_SDP_SENDONLY = 2,
    JANUS_SDP_RECVONLY = 3,
    JANUS_SDP_INACTIVE = 4,
    JANUS_SDP_INVALID = 5,
}
extern "C" {
    /// \brief Method to serialize a janus_sdp object to an SDP string
/// @param[in] sdp The janus_sdp object to serialize
/// @returns A pointer to a string with the serialized SDP, if successful, NULL otherwise
    pub fn janus_sdp_write(sdp: *mut janus_sdp)
     -> *mut ::std::os::raw::c_char;
}
